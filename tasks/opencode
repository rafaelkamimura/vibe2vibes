# OpenCode Testing Infrastructure Tasks

## Current Status (End of Day - 2025-10-22)
- âœ… COMPLETED: Core testing infrastructure is now functional
- âœ… COMPLETED: Fixed TypeScript compilation errors in claude-code-adapter.ts
- âœ… COMPLETED: Fixed all high-priority test failures (SessionManager, MessageRouter, ModelSelector, ResultAggregator, CommunicationBus)
- âœ… COMPLETED: Docker baseline (Dockerfile + compose) added for agent-communication-bus services
- âœ… COMPLETED: Improved core module implementations (message-router, model-selector, result-aggregator)
- âœ… COMPLETED: Enhanced unit test coverage and assertions
- ðŸ”´ REMAINING: 8 integration test failures need investigation (Phase 2 work)
- ðŸ“‹ Test infrastructure ready for real framework integration testing

## Testing Infrastructure Tasks

### Phase 1: Test Environment Setup âœ… COMPLETED
- [x] Create tests/fixtures/ directory structure
- [x] Set up Jest test environment configuration
- [x] Create mock data generators for messages, agents, sessions
- [x] Set up test database configuration (in-memory or test instance)

### Phase 2: Unit Tests (Using Mocks) âœ… COMPLETED
- [x] Write test cases for CommunicationBus core functionality
- [x] Write test cases for MessageRouter routing logic
- [x] Write test cases for SessionManager lifecycle
- [x] Write test cases for ModelSelector strategy patterns
- [x] Write test cases for ResultAggregator algorithms

**Note:** Tests are written but currently failing due to missing implementation methods. This is expected as tests were created to validate the future implementation. The test infrastructure is complete and ready for validation once Claude's TypeScript fixes are complete.

### Phase 3: Integration Tests âœ… COMPLETED
- [x] Create integration test framework structure
- [x] Write adapter integration tests (using mocks initially)
- [x] Write end-to-end message flow tests
- [x] Write session management integration tests
- [x] Write multi-agent orchestration tests

### Phase 4: Test Utilities & Fixtures âœ… COMPLETED
- [x] Create test helper utilities
- [x] Create comprehensive test fixtures for all scenarios
- [ ] Set up test coverage reporting (deferred to Phase 2)
- [ ] Create performance test benchmarks (deferred to Phase 2)

### Phase 5: Deployment & Containerization âœ… COMPLETED
- [x] Add `.dockerignore` for lean build contexts
- [x] Create multi-stage `Dockerfile` (Node 20, non-root, healthcheck)
- [x] Create `docker-compose.yml` for local dev (bus + Postgres + Redis)
- [x] Create `docker-compose.prod.yml` for production baseline
- [ ] Document Docker workflows and environment variables for the team (deferred to documentation phase)

---

## Tomorrow's Tasks (2025-10-23) - Phase 2: Integration Test Fixes + Real Framework Testing

### Priority 1: Fix Integration Test Failures (2-3 hours)
**Current Status**: 69 integration tests failing, mostly due to WebSocket mocking issues

**Root Cause Analysis:**
- `WebSocketServer.mockImplementation is not a function` - improper Jest mocking
- `createTestScenario` not found - missing test framework function
- WebSocket lifecycle not properly mocked in integration environment

**Tasks:**
- [ ] Fix `tests/integration/integration-test-framework.ts` WebSocket mocking (Line 56)
  - Replace inline `require('ws')` with proper Jest mock
  - Add `jest.mock('ws')` at module level
  - Create comprehensive WebSocketServer mock with all methods
  - Mock WebSocket client instances properly
- [ ] Add missing `createTestScenario` helper to test framework
  - Review `adapter-integration.test.ts` usage patterns
  - Implement scenario builder with proper types
  - Export from integration-test-framework.ts
- [ ] Fix multi-agent-orchestration.test.ts (7 tests)
  - Verify WebSocket mock fixes resolve all failures
  - Add proper cleanup in afterEach hooks
- [ ] Run full test suite and verify fixes
  - Target: Reduce failures from 69 to < 10
  - Document any remaining legitimate failures

### Priority 2: Real OpenCode Binary Integration (2 hours)
**Goal**: Test adapters with actual framework binaries

- [ ] Verify OpenCode binary installation
  - Check `OPENCODE_BINARY_PATH` environment variable
  - Test basic `opencode --help` execution
  - Document version and capabilities
- [ ] Create real adapter test suite
  - New file: `tests/integration/real-opencode-adapter.test.ts`
  - Test process spawning and communication
  - Test stdin/stdout message passing
  - Handle real task execution (simple code review)
- [ ] Test with NLI delegation
  - Natural language â†’ OpenCode golang-pro
  - Verify end-to-end message flow
  - Capture and validate real responses

### Priority 3: Performance and Reliability Testing (1 hour)
- [ ] Measure adapter startup time
- [ ] Test concurrent task handling (5 simultaneous tasks)
- [ ] Verify graceful shutdown and cleanup
- [ ] Test error recovery (killed process, timeout)
- [ ] Document performance characteristics

### Success Criteria
- âœ… Integration test failures reduced from 69 to < 10
- âœ… Real OpenCode adapter working end-to-end
- âœ… NLI â†’ OpenCode delegation validated
- âœ… Performance metrics documented

## Notes
- All tests should use mocks initially to avoid conflicts with adapter development
- Focus on testing business logic and message flow
- Tests should be ready to validate Claude's TypeScript fixes
- Use dependency injection patterns to enable easy mocking
- Docker build currently fails until TypeScript compilation errors are resolved (tracked separately)

## Dependencies
- Waiting for TypeScript compilation errors to be resolved
- Will need actual adapter implementations for final integration tests
